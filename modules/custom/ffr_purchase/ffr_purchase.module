<?php
/**
 * @file
 * Code for the ffr_purchase feature.
 */

include_once 'ffr_purchase.features.inc';


/**
 * Implements hook_field_formatter_info().
 */
function ffr_purchase_field_formatter_info() {
  return array(
    'ffr_purchase_reserve_form' => array(
      'label' => t('FFR Reserve form'),
      'description' => t('Display an FFR Reserve for the referenced product.'),
      'field types' => array('commerce_product_reference'),
      'settings' => array(
        'show_quantity' => FALSE,
        'default_quantity' => 1,
        'combine' => TRUE,
        'show_single_product_attributes' => FALSE,
        'line_item_type' => 'product',
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function ffr_purchase_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = array_merge(field_info_formatter_settings($display['type']), $display['settings']);

  $element = array();

  if ($display['type'] == 'ffr_purchase_reserve_form') {
    $element['show_quantity'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display a textfield quantity widget on the add to cart form.'),
      '#default_value' => $settings['show_quantity'],
    );

    $element['default_quantity'] = array(
      '#type' => 'textfield',
      '#title' => t('Default quantity'),
      '#default_value' => $settings['default_quantity'] <= 0 ? 1 : $settings['default_quantity'],
      '#element_validate' => array('ffr_purchase_field_formatter_settings_form_quantity_validate'),
      '#size' => 16,
    );

    $element['combine'] = array(
      '#type' => 'checkbox',
      '#title' => t('Attempt to combine like products on the same line item in the cart.'),
      '#description' => t('The line item type, referenced product, and data from fields exposed on the Add to Cart form must all match to combine.'),
      '#default_value' => $settings['combine'],
    );

    $element['show_single_product_attributes'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show attribute widgets even if the Add to Cart form only represents one product.'),
      '#description' => t('If enabled, attribute widgets will be shown on the form with the only available options selected.'),
      '#default_value' => $settings['show_single_product_attributes'],
    );

    // Add a conditionally visible line item type element.
    $types = commerce_product_line_item_types();

    if (count($types) > 1) {
      $element['line_item_type'] = array(
        '#type' => 'select',
        '#title' => t('Add to Cart line item type'),
        '#options' => array_intersect_key(commerce_line_item_type_get_name(), drupal_map_assoc($types)),
        '#default_value' => $settings['line_item_type'],
      );
    }
    else {
      $element['line_item_type'] = array(
        '#type' => 'hidden',
        '#value' => key($types),
      );
    }
  }

  return $element;
}

/**
 * Element validate callback: ensure a valid quantity is entered.
 */
function ffr_purchase_field_formatter_settings_form_quantity_validate($element, &$form_state, $form) {
  if (!is_numeric($element['#value']) || $element['#value'] <= 0) {
    form_set_error(implode('][', $element['#parents']), t('You must enter a positive numeric default quantity value.'));
  }
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function ffr_purchase_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = array_merge(field_info_formatter_settings($display['type']), $display['settings']);

  $summary = array();

  if ($display['type'] == 'ffr_purchase_reserve_form') {
    $summary = array(
      t('Quantity widget: !status', array('!status' => $settings['show_quantity'] ? t('Enabled') : t('Disabled'))),
      t('Default quantity: @quantity', array('@quantity' => $settings['default_quantity'])),
      t('Combine like items: !status', array('!status' => $settings['combine'] ? t('Enabled') : t('Disabled'))),
      t('!visibility attributes on single product forms.', array('!visibility' => $settings['show_single_product_attributes'] ? t('Showing') : t('Hiding'))),
    );

    if (count(commerce_product_line_item_types()) > 1) {
      $summary[] = t('Add to Cart line item type: @type', array('@type' => commerce_line_item_type_get_name($settings['line_item_type'])));
    }
  }

  return implode('<br />', $summary);
}

/**
 * Implements hook_field_formatter_view().
 */
function ffr_purchase_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] == 'ffr_purchase_reserve_form') {
   // Collect the list of product IDs.
  $product_ids = array();
   
    foreach ($items as $delta => $item) {
      $product_ids[] = $item['product_id'];
    }

    // Load the referenced products.
    $products = commerce_product_load_multiple($product_ids);
    
    $return = array();

    //foreach ($items as $delta => $item) {
      $return[] = drupal_get_form('ffr_purchase_test_form', $products);//$item['product_id']);
    //}
    return $return;
  }
  dpm(array($entity_type, $entity, $field, $instance, $langcode, $items, $display));
  $settings = array_merge(field_info_formatter_settings($display['type']), $display['settings']);
  $result = array();


  foreach ($items as $delta => $item) {
    $product_ids[] = $item['product_id'];
  }

  if ($display['type'] == 'ffr_purchase_reserve_form') {
    // Load the referenced products.
    $products = commerce_product_load_multiple($product_ids);

    // Check to ensure products are referenced, before returning results.
    if (!empty($products)) {
      $type = !empty($settings['line_item_type']) ? $settings['line_item_type'] : 'product';
      $line_item = commerce_product_line_item_new(reset($products), $settings['default_quantity'], 0, array(), $type);
      $line_item->data['context']['product_ids'] = array_keys($products);
      $line_item->data['context']['add_to_cart_combine'] = $settings['combine'];
      $line_item->data['context']['show_single_product_attributes'] = $settings['show_single_product_attributes'];

      $result[] = array(
        '#arguments' => array(
          'form_id' => 'ffr_purchase_test_form',//commerce_cart_add_to_cart_form_id($product_ids),
          'line_item' => $line_item,
          'show_quantity' => $settings['show_quantity'],
        ),
      );
    }
  }
  //return drupal_get_form('ffr_purchase_test_form');
  return array('#markup' =>'aaa', '#type' => 'markup');
  return $result;
}


function ffr_purchase_test_form($form, &$form_state, $products) {
  //$product = entity_load('commerce_product', array($product_id));
  $form['map']['#type'] = 'value';
  $form['map']['#value'] = array();
  $form['amount']['#type'] = 'select';
  $form['amount']['#default_value'] = 50;
  
  $quantities = array(10, 25, 50, 100, 250);
 
  foreach($quantities as $quantity) {
    $form['amount']['#options'][$quantity] = $output = format_plural($quantity, '1 liter', '@count liters');;
  }
  
  

  foreach($products as $product) {
    $wrapper = entity_metadata_wrapper('commerce_product', $product);
    $form[$product->sku]['#type'] = 'container';
    $form[$product->sku]['#attributes'] = array('class' => array($product->sku));
    $form[$product->sku]['price']['#markup'] = commerce_currency_format($wrapper->commerce_price->amount->value(), $wrapper->commerce_price->currency_code->value(), $product);
    $form[$product->sku]['buy']['#type'] = 'submit';
    $form[$product->sku]['buy']['#value'] = $product->title;
    $form['map']['#value'][$product->title] = $product;
  }
  
  $form['#submit'][] = 'ffr_purchase_test_form_submit';
  return $form;
}

function ffr_purchase_test_form_submit($form, &$form_state) {
  dpm($form);
  dpm($form_state);
  $product = $form_state['values']['map'][$form_state['values']['op']];
  dpm($product);
  global $user;
  $order = commerce_order_new($user->uid, 'pending');
  dpm($order);
  $line_item = commerce_line_item_new('product', $order->order_id);
  dpm($line_item);
  //commerce_product_add
  //commerce_line_item_pro
}
